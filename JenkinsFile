pipeline {
    agent any
    optiopns {
        timeout(time: 10, unit: 'MINUTES')
    }
    environment {
        ACR_NAME = "mitchacr"
        registryUrl = "mitchacr.azurecr.io"
        IMAGE_NAME = "nodejswebapp"
        IMAGE_TAG = "v1.0.0"
    }
    stages {
        stage ('SCM Checkout') {
            steps {
                git branch: 'main', url: 'https://github.com/Mitchxxx/Build_NodeJs_App.git'
            }
        }
        stage('Run Sonarqube'){
            environment {
                scannerHome = tool 'ibt-sonarqube';
            }
            steps {
                withSonarQubeEnv(credentialsId: 'ibt-sonar', installationName: 'IBT sonarqube') {
                    sh "${scannerHome}/bin/sonar-scanner"
                }
            }

        }
        stage ('Build Docker Image'){
            steps {
                script {
                    //dockerImage = docker.build registryUrl
                    def dockerImage = docker.build("{$ACR_NAME}.azurecr.io/${IMAGE_NAME}:${IMAGE_TAG}", '.')
                }
            }
        }
        stage ('Upload Image to ACR') {
            steps {
                script {
                    docker.withRegistry( "https://${ACR_NAME}.azurecr.io", registryCredential )
                    sh "docker push ${ACR_NAME}.azurecr.io/${IMAGE_NAME}:${IMAGE_TAG}"
                }
            }
        }
    }
}